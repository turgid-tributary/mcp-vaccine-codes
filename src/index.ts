import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

async function fetchVaccineCodes() {
  try {
    const response = await fetch(
      "https://github.com/hellodocket/vaccine-code-mappings/releases/latest/download/vaccine-code-mapping.json",
    );
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error fetching the file:", error);
    throw error;
  }
}

/**
 * These types were generated by giving our schema https://github.com/hellodocket/vaccine-code-mappings/blob/main/vaccine-code-mapping-schema.json
 * to gpt-4.1-mini
 */
type CPTCodesItem = {
  cpt_code: string;
  cpt_desc: string;
};
type Manufacturer = {
  trade_name: string;
  mvx_code: string;
  manufacturer: string;
  last_updated: string;
  product_name_status: string;
};
type Group = {
  name: string;
  active: boolean;
};
type Groups = {
  [groupId: string]: Group; // groupId is a string of digits e.g. "123"
};
type InnerObject = {
  cvx_code: string;
  name: string;
  description: string;
  status: string;
  cpt_codes: CPTCodesItem[];
  kj: Manufacturer[];
  groups: Groups;
};
type CPTorCVX = {
  [key: string]: InnerObject; // keys are strings of digits e.g. "123"
};
type VaccineCodeMappings = {
  cpt: CPTorCVX; // must have at least one property
  cvx: CPTorCVX; // must have at least one property
};

const VACCINE_CODES: Promise<VaccineCodeMappings> = fetchVaccineCodes();

// Create MCP server instance
const server = new McpServer({
  name: "vaccine-codes",
  version: "1.0.0",
  capabilities: {
    resources: {},
    tools: {},
  },
});

// Register tools
server.tool(
  "list-groups",
  "List all CVX Vaccine Groups and their Component Vaccines",
  {},
  async ({}) => {
    const vaccineCodes = await VACCINE_CODES;

    const cvxGroupToInfo: {
      [groupId: string]: { name: string; componentVaccines: string[] };
    } = {};
    for (const [cvxCode, cvxCodeInfo] of Object.entries(vaccineCodes.cvx)) {
      for (const [groupId, groupInfo] of Object.entries(cvxCodeInfo.groups)) {
        if (!cvxGroupToInfo[groupId]) {
          cvxGroupToInfo[groupId] = {
            name: groupInfo.name,
            componentVaccines: [cvxCode],
          };
        } else {
          cvxGroupToInfo[groupId].componentVaccines.push(cvxCode);
        }
      }
    }

    const response = {
      title: "All CDC CVX Vaccine Groups",
      vaccineGroups: Object.entries(cvxGroupToInfo).map(([groupId, info]) => ({
        code: groupId,
        name: info.name,
        componentVaccines: info.componentVaccines,
      })),
    };

    return {
      content: [
        {
          type: "text",
          text: JSON.stringify(response, null, 2),
        },
      ],
    };
  },
);

async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("Vaccine Code MCP Server running on stdio");
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});
